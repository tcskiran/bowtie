#!/usr/bin/env python3
"""
A bowtie runner which validates the requests and responses, before responding.
"""
from dataclasses import dataclass
from pathlib import Path
import io
import json
import os
import sys

from jsonschema_specifications import REGISTRY as SPECIFICATIONS
from referencing import Registry, Resource
import jsonschema.validators

SCHEMA_PATH = Path(os.environ.get("BOWTIE_SCHEMA", "/io-schema.json"))
SCHEMA = json.loads(SCHEMA_PATH.read_text())
SCHEMA_RESOURCE = Resource.from_contents(SCHEMA)
REGISTRY = (SCHEMA_RESOURCE @ Registry()).with_resource(
    uri="urn:current-dialect",
    resource=SPECIFICATIONS.get_or_retrieve(SCHEMA["$schema"]).value,
)
Validator = jsonschema.validators.validator_for(SCHEMA)
REQUEST_VALIDATOR = Validator(
    schema={"$ref": f"{SCHEMA['$id']}#/$defs/command"},
    registry=REGISTRY,
)
RESPONSE_VALIDATORS = {
    k: Validator(
        registry=REGISTRY,
        schema={
            "$ref": f"{SCHEMA['$id']}#/$defs/command/$defs/{k}/$defs/response",
        },
    )
    for k in SCHEMA["$defs"]["command"]["$defs"]
}


@dataclass
class Runner:
    _started: bool = False
    _stdout: io.TextIOWrapper = sys.stdout
    _stderr: io.TextIOWrapper = sys.stderr

    def run(self, stdin=sys.stdin):
        for line in stdin:
            each = json.loads(line)
            for error in REQUEST_VALIDATOR.iter_errors(each):
                self._stderr.write(error.message)
                self._stderr.write("\n")
            cmd = each.pop("cmd")
            response = getattr(self, f"cmd_{cmd}")(**each)
            for error in RESPONSE_VALIDATORS[cmd].iter_errors(response):
                self._stderr.write(error.message)
                self._stderr.write("\n")
            self._stdout.write(f"{json.dumps(response)}\n")
            self._stdout.flush()

    def cmd_start(self, version):
        assert version == 1

        self._started = True
        return dict(
            ready=True,
            version=1,
            implementation=dict(
                language="python",
                name="lintsonschema",
                issues="https://github.com/bowtie-json-schema/bowtie/issues",
                dialects=[
                    "https://json-schema.org/draft/2020-12/schema",
                    "https://json-schema.org/draft/2019-09/schema",
                    "http://json-schema.org/draft-07/schema#",
                    "http://json-schema.org/draft-06/schema#",
                    "http://json-schema.org/draft-04/schema#",
                    "http://json-schema.org/draft-03/schema#",
                ],
            ),
        )

    def cmd_dialect(self, dialect):
        assert self._started, "Not started!"
        return dict(ok=True)

    def cmd_run(self, case, seq):
        assert self._started, "Not started!"

        results = [
            {"valid": test.get("valid", True)} for test in case["tests"]
        ]
        return dict(seq=seq, results=results)

    def cmd_stop(self):
        assert self._started, "Not started!"

        sys.exit(0)


Runner().run()
